import "util.scrypt";

/**
 * Demonstrates TxAdvanced, with external funding (additional input) and a change output
 */
contract AdvancedCounter {
	public function increment(bytes sighashPreimage, int amount, bytes changePKH, int changeSats) {
        // The following arguments can be generated using sample code at
        // https://gist.github.com/scrypt-sv/f6882be580780a88984cee75dd1564c4.js
		PrivKey privKey = PrivKey(0x621de38d9af72be8585d19584e3954d3fd0dc9752bb9f9fb28c4f9ed7c1e40ea);
		PubKey pubKey = PubKey(b'02773aca113a3217b67a95d5b78b69bb6386ed443ea5decf0ba92c00d179291921');
        // invK is the modular inverse of k, the ephemeral key
		int invK = 0xa2103f96554aba49bbf581738d3b5a38c5a44b6238ffb54cfcca65b8c87ddc08;
        // r is x coordinate of R, which is kG
		int r = 0x00f0fc43da25095812fcddde7d7cd353990c62b078e1493dc603961af25dfc6b60;
        // rBigEndian is the signed magnitude representation of r, in big endian
		bytes rBigEndian = b'00f0fc43da25095812fcddde7d7cd353990c62b078e1493dc603961af25dfc6b60';
        
        // SIGHASH_ANYONECANPAY | SIGHASH_ALL | SIGHASH_FORKID
		bytes sigHashType = b'c1';

		TxAdvanced tx = new TxAdvanced();
		// this ensures the preimage is for the current tx
		require(tx.validate(sighashPreimage, privKey, pubKey, invK, r, rBigEndian, sigHashType));

		int len = length(sighashPreimage);
		bytes hashOutputs = sighashPreimage[len - 40 : len - 8];
		// scriptCode is just scriptPubKey if there is no CODESEPARATOR in the latter
		bytes scriptCode = Util.readVarint(sighashPreimage[104:]);
		int scriptLen = length(scriptCode);

		// the last OP_RETURN byte contains the application state, i.e., counter
		int counter = unpack(scriptCode[scriptLen - 1 :]);

		// Expect the counter to be incremented in the new transaction state
		bytes scriptCode_ = scriptCode[: scriptLen - 1] ++ num2bin(counter + 1, 1);

        bytes counterOutput = num2bin(amount, 8) ++ Util.writeVarint(scriptCode_);

		// Expect the additional CHANGE output
		//    P2PKH:       DUP,HASH160  PKHLen      PKH      EQUALVERIFY,CHECKSIG
		bytes changeScript = b'76a9' ++ b'14' ++  changePKH ++ b'88ac';
		bytes changeOutput = num2bin(changeSats, 8) ++ Util.writeVarint(changeScript);

		// output: amount + scriptlen + script
		Sha256 hashOutputs_ = hash256(counterOutput ++ changeOutput);

		// ensure output matches what we expect:
		//     - amount is same as specified
		//     - output script is the same as scriptCode except the counter was incremented
		//     - expected CHANGE output script is there
		require(hashOutputs == hashOutputs_);
    }
}